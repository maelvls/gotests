{{define "function"}}
{{- $f := .}}

func {{.TestName}}(t *testing.T) {
	testCases := map[string]struct {
		{{- with .Receiver}}
		    {{- if .Fields}}
				{{- range .Fields}}
					{{Field .}} {{.Type}}
				{{- end}}
			{{- end}}
	    {{- end}}
        {{- if .TestParameters}}
            {{- range .TestParameters}}
                    {{Param .}} {{.Type}}
            {{- end}}
        {{- end}}
		{{- range .TestResults}}
			{{Want .}} {{.Type}}
		{{- end}}
		{{- if .ReturnsError}}
			wantErr error
		{{- end}}
	}{
		// TODO: Add test cases.
	}
	for {{if (or .Subtests (not .IsNaked))}} name, tt := {{end}} range testCases {
        {{- if .Subtests }}
		{{- if .Parallel}}tt := tt{{end}}
		t.Run(name, func(t *testing.T) { {{- end -}}
			{{- if .Parallel}}t.Parallel(){{end}}
			{{- with .Receiver}}
				{{- if .IsStruct}}
					{{Receiver .}} := {{if .Type.IsStar}}&{{end}}{{.Type.Value}}{
					{{- range .Fields}}
						{{.Name}}: tt.{{Field .}},
					{{- end}}
					}
				{{- end}}
			{{- end}}
			{{- range .Parameters}}
				{{- if .IsWriter}}
					{{Param .}} := &bytes.Buffer{}
				{{- end}}
			{{- end}}

			{{template "results" $f}} {{template "call" $f}}

			{{- if .ReturnsError}}
                if tt.wantErr != nil {
                    require.Error(t, err)
                    assert.Equal(t, tt.wantErr, err)
                    {{- if .TestResults}}
						{{if .Subtests }}return{{else}}continue{{end}}
					{{- end}}
                }
				require.NoError(t, err)

			{{- end}}
			{{- range .TestResults}}
				{{- if .IsWriter}}
				    {{Got .}} := {{Param .}}.String()
				{{- end}}
				assert.Equal(t, tt.{{Want .}}, {{Got .}})
			{{- end}}
		{{- if .Subtests }} }) {{- end -}}
	}
}

{{end}}